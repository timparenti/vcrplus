10 Nov 2003

Full 8-digit VCRplus+ decode/encode code enclosed.

The first "release" of this is at <http://www.cryptome.org/vcrpp.c>.

Since then, I've fixed one bug, put in some efficiency changes and
added some proper inverse functions in place of the brute force
loops.  And transliterated it (badly) to Perl, with a PerlTk GUI.

I've also noted that - according to Google - the cryptome posting
has gotten basically no notice.

So I'm sending a couple of floppies to people who had some comments
on VCRPP a decade ago and for whome I can find a likely postal
address.

Please pass it on and/or post it to usenet or the web if you
feel like it.  My only intent is to get this code out where it'll
be archived and available.

Thanks,

Anonymous



25 July 2003

---------------------------------------------------------------------

From: Anonymous
Subject: VCRplus+ Code that wants to be free

I'm not an expert on anonymous posting/distribution, so I'm
requesting your help with this.

Background:

In 1992, Ken Shirriff, Curt Welch and Andrew Kinsman published
a partial analysis of the VCRplus+ "PlusCode" coding scheme
in Cryptologia 16(3) July 1992, pp 227-234.

They figured out the codes of length 1 through 6, but didn't
break the 7 and 8 digit codes.

Later, programs implementing their logic appeared on the net,
adding encoding as well as decoding.

New stuff:

This program expands on those programs, and does the 7 and 8
digit codes, which includes TV/cable channels over 64 and
times not an even multiple of 30 minutes, and/or not lasting
an even multiple of a half hour.

It is therefore useful for personal recording of local sources at
non-round-number times or on non-broadcast channels, and for
generating codes that aren't in the newspaper.

The (encoding) algorithm is not fast enough to be used for
commercial purposes, having a brute-force section in it.  But
someone might be able to improve on that.

I am not breaking any confidentiality agreements.  I have no
access to inside information on the system.  This was done
by reverse engineering.

Please consider posting this on cryptome, under the crypto
category.

